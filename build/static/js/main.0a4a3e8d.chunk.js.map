{"version":3,"sources":["logo.svg","Dialog.js","Card.js","Timeline.js","App.js","serviceWorker.js","index.js"],"names":["Transition","React","forwardRef","props","ref","Slide","direction","DialogSlide","useState","open","setOpen","useEffect","images","i","push","CardMedia","component","alt","height","image","title","Dialog","TransitionComponent","keepMounted","onClose","aria-labelledby","aria-describedby","DialogTitle","id","DialogContent","autoPlay","animation","indicators","timeout","navButtonsAlwaysVisible","useStyles","makeStyles","root","ImgMediaCard","showDialog","setShowDialog","classes","Card","className","CardActionArea","CardContent","Typography","variant","color","CardActions","Button","size","onClick","Timeline","iconStyle","background","icon","date","App","style","backgroundColor","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"mKAAe,I,mNCWTA,EAAaC,IAAMC,YAAW,SAAoBC,EAAOC,GAC7D,OAAO,cAACC,EAAA,EAAD,aAAOC,UAAU,KAAKF,IAAKA,GAASD,OAG9B,SAASI,EAAYJ,GAAQ,IAAD,EACjBF,IAAMO,UAAS,GADE,mBAClCC,EADkC,KAC5BC,EAD4B,KAGzCT,IAAMU,WAAU,WACVF,GAAQN,EAAMM,MAChBC,EAAQP,EAAMM,QACf,CAACN,EAAMM,OAWX,IARC,IAOKG,EAAS,GACPC,EAAI,EAAGA,EAAI,GAAIA,IAErBD,EAAOE,KAAK,cAACC,EAAA,EAAD,CACVC,UAAU,MACVC,IAAI,wBACJC,OAAO,MACPC,MAAM,qCACNC,MAAM,2BAGT,OACE,8BACE,eAACC,EAAA,EAAD,CACEZ,KAAMA,EACNa,oBAAqBtB,EACrBuB,aAAW,EACXC,QApBc,WAClBd,GAAQ,IAoBJe,kBAAgB,2BAChBC,mBAAiB,iCANnB,UAQE,cAACC,EAAA,EAAD,CAAaC,GAAG,6BAChB,cAACC,EAAA,EAAD,UAEE,cAAC,IAAD,CACAC,UAAW,EACTC,UAAW,QACXC,YAAa,EACbC,QAAS,IACTC,yBAAyB,EAL3B,SAOCtB,WCnDX,IAAMuB,EAAYC,YAAW,CAC3BC,KAAM,KAKO,SAASC,EAAanC,GAAQ,IAAD,EACNF,IAAMO,UAAS,GADT,mBACnC+B,EADmC,KACvBC,EADuB,KAEpCC,EAAUN,IAEhB,OACE,qCACA,eAACO,EAAA,EAAD,CAAMC,UAAWF,EAAQJ,KAAzB,UACE,eAACO,EAAA,EAAD,WACE,cAAC7B,EAAA,EAAD,CACEC,UAAU,MACVC,IAAI,wBACJC,OAAO,MACPC,MAAM,qCACNC,MAAM,0BAER,cAACyB,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAYC,QAAQ,QAAQC,MAAM,gBAAgBhC,UAAU,IAA5D,gJAMJ,cAACiC,EAAA,EAAD,UACE,cAACC,EAAA,EAAD,CAAQC,KAAK,QAAQH,MAAM,UAAUI,QAAS,kBAAMZ,GAAc,IAAlE,uBAKJ,cAACjC,EAAD,CAAaE,KAAM8B,OClCR,SAASc,IAEtB,OACE,eAAC,mBAAD,WAEA,cAAC,0BAAD,CACEC,UAAW,CAAEC,WAAY,UAAWP,MAAO,QAC3CQ,KAAM,cAAC,IAAD,MAEV,eAAC,0BAAD,CACEb,UAAU,kCACVc,KAAK,cACLH,UAAW,CAAEC,WAAY,UAAWP,MAAO,QAC3CQ,KAAM,cAAC,IAAD,IAJR,UAMA,cAAClB,EAAD,IAGA,8BACE,+BAIF,cAAC,0BAAD,CACEK,UAAU,kCACVc,KAAK,cACLH,UAAW,CAAEC,WAAY,UAAWP,MAAO,QAC3CQ,KAAM,cAAC,IAAD,IAJR,SAMA,cAAClB,EAAD,MAEA,cAAC,0BAAD,CACEK,UAAU,kCACVc,KAAK,cACLH,UAAW,CAAEC,WAAY,UAAWP,MAAO,QAC3CQ,KAAM,cAAC,IAAD,IAJR,SAMA,cAAClB,EAAD,MAEA,cAAC,0BAAD,CACEgB,UAAW,CAAEC,WAAY,UAAWP,MAAO,QAC3CQ,KAAM,cAAC,IAAD,SCvCKE,MARf,WACE,OACE,qBAAKf,UAAU,MAAMgB,MAAO,CAACC,gBAAgB,WAA7C,SACE,cAACP,EAAD,OCIcQ,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.0a4a3e8d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.103b5fa1.svg\";","import React from 'react';\nimport Button from '@material-ui/core/Button';\nimport Dialog from '@material-ui/core/Dialog';\nimport DialogActions from '@material-ui/core/DialogActions';\nimport DialogContent from '@material-ui/core/DialogContent';\nimport DialogContentText from '@material-ui/core/DialogContentText';\nimport DialogTitle from '@material-ui/core/DialogTitle';\nimport Slide from '@material-ui/core/Slide';\nimport Carousel from 'react-material-ui-carousel';\nimport CardMedia from '@material-ui/core/CardMedia';\n\nconst Transition = React.forwardRef(function Transition(props, ref) {\n  return <Slide direction=\"up\" ref={ref} {...props} />;\n});\n\nexport default function DialogSlide(props) {\n  const [open, setOpen] = React.useState(false);\n\n  React.useEffect(() => {\n    if (open != props.open)\n      setOpen(props.open);\n  }, [props.open])\n\n\n  const handleClickOpen = () => {\n    setOpen(true);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n  };\n const images = [];\n for(let i = 0; i < 10; i++) {\n\n   images.push(<CardMedia\n     component=\"img\"\n     alt=\"Contemplative Reptile\"\n     height=\"200\"\n     image=\"https://source.unsplash.com/random\"\n     title=\"Contemplative Reptile\"\n   />)\n }\n  return (\n    <div>\n      <Dialog\n        open={open}\n        TransitionComponent={Transition}\n        keepMounted\n        onClose={handleClose}\n        aria-labelledby=\"alert-dialog-slide-title\"\n        aria-describedby=\"alert-dialog-slide-description\"\n      >\n        <DialogTitle id=\"alert-dialog-slide-title\"></DialogTitle>\n        <DialogContent>\n\n          <Carousel\n          autoPlay= {true}\n            animation={\"slide\"}\n            indicators= {true}\n            timeout={500}\n            navButtonsAlwaysVisible={true}>\n\n          {images}\n          </Carousel>\n\n        </DialogContent>\n\n      </Dialog>\n    </div>\n  );\n}\n","import React from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport Card from '@material-ui/core/Card';\nimport CardActionArea from '@material-ui/core/CardActionArea';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport CardMedia from '@material-ui/core/CardMedia';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport DialogSlide from './Dialog';\n\nconst useStyles = makeStyles({\n  root: {\n    //maxWidth: 345,\n  },\n});\n\nexport default function ImgMediaCard(props) {\n  const [showDialog, setShowDialog] = React.useState(false);\n  const classes = useStyles();\n\n  return (\n    <>\n    <Card className={classes.root}>\n      <CardActionArea>\n        <CardMedia\n          component=\"img\"\n          alt=\"Contemplative Reptile\"\n          height=\"200\"\n          image=\"https://source.unsplash.com/random\"\n          title=\"Contemplative Reptile\"\n        />\n        <CardContent>\n          <Typography variant=\"body2\" color=\"textSecondary\" component=\"p\">\n            Lizards are a widespread group of squamate reptiles, with over 6,000 species, ranging\n            across all continents except Antarctica\n          </Typography>\n        </CardContent>\n      </CardActionArea>\n      <CardActions>\n        <Button size=\"small\" color=\"primary\" onClick={() => setShowDialog(true)}>\n          More\n        </Button>\n      </CardActions>\n    </Card>\n    <DialogSlide open={showDialog}/>\n    </>\n  );\n}\n","import { VerticalTimeline, VerticalTimelineElement }  from 'react-vertical-timeline-component';\nimport StarIcon from '@material-ui/icons/Star';\nimport SchoolIcon from '@material-ui/icons/School';\nimport WorkIcon from '@material-ui/icons/Work';\nimport FavoriteIcon from '@material-ui/icons/Favorite';\nimport 'react-vertical-timeline-component/style.min.css';\nimport React from 'react';\nimport IndeterminateCheckBoxIcon from '@material-ui/icons/IndeterminateCheckBox';\nimport { CardMedia } from '@material-ui/core';\nimport ImgMediaCard from './Card'\n\nexport default function Timeline() {\n\n  return (\n    <VerticalTimeline>\n\n    <VerticalTimelineElement\n      iconStyle={{ background: '#EA4963', color: '#fff' }}\n      icon={<StarIcon />}\n    />\n  <VerticalTimelineElement\n    className=\"vertical-timeline-element--work\"\n    date=\"2010 - 2011\"\n    iconStyle={{ background: '#EA4963', color: '#fff' }}\n    icon={<FavoriteIcon />}\n  >\n  <ImgMediaCard />\n\n\n  <div>\n    <label>\n    </label>\n    </div>\n  </VerticalTimelineElement>\n  <VerticalTimelineElement\n    className=\"vertical-timeline-element--work\"\n    date=\"2008 - 2010\"\n    iconStyle={{ background: '#EA4963', color: '#fff' }}\n    icon={<FavoriteIcon />}\n  >\n  <ImgMediaCard />\n  </VerticalTimelineElement>\n  <VerticalTimelineElement\n    className=\"vertical-timeline-element--work\"\n    date=\"2008 - 2010\"\n    iconStyle={{ background: '#EA4963', color: '#fff' }}\n    icon={<FavoriteIcon />}\n  >\n  <ImgMediaCard />\n  </VerticalTimelineElement>\n  <VerticalTimelineElement\n    iconStyle={{ background: '#EA4963', color: '#fff' }}\n    icon={<IndeterminateCheckBoxIcon />}\n  />\n\n</VerticalTimeline>\n  )\n\n}\n","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Timeline from './Timeline';\n\nfunction App() {\n  return (\n    <div className=\"App\" style={{backgroundColor:\"#E3E3E3\"}}>\n      <Timeline />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}